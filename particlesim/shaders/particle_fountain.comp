#version 450
#extension GL_ARB_separate_shader_objects : enable

layout ( local_size_x = 128, local_size_y = 1, local_size_z = 1 ) in;

struct Particle
{
    vec3 pos;
    vec3 color;
    vec3 velocity;
    float ttl;
    float massKG;
};

#define MAX_INSTANCES 4

struct PointGravity
{
    vec3 pos;
    float massKG;
    float G;
};

struct PlanarGravity
{
    vec3 pos;
    vec3 n;
    float massKG;
    float G;
    uint deactivate;
};

struct ConstForce
{
    vec3 direction;
    float magnitude;
};

struct Setup
{
    PointGravity pointGravity[MAX_INSTANCES];
    PlanarGravity planarGravity[MAX_INSTANCES];
    ConstForce constForce[MAX_INSTANCES];
    uint pointGravityCount;
    uint planarGravityCount;
    uint constForceCount;
};

layout(std430, binding = 0) buffer inputData
{
    Particle d[];
};

layout(binding = 1) uniform worldSize
{
    vec3 size;
};

layout(binding = 2) uniform Interactors
{
    Setup iData;
};

layout(push_constant) uniform PushConst
{
    uint particleCount;
    float dt;
};

void toWorldScale(inout Particle p, in vec3 size)
{
    p.pos.x *= size.x;
    p.pos.y *= size.y;
    p.pos.z *= size.z;
}

void toNormalizedScale(inout Particle p, in vec3 size)
{
    p.pos.x *= (1/size.x);
    p.pos.y *= (1/size.y);
    p.pos.z *= (1/size.z);
}

void euler(inout Particle p, in vec3 a, in float dt)
{
    p.velocity = p.velocity + a*dt;
    p.pos = p.pos + p.velocity*dt;
}

vec3 calcAccelPointGravity(in Particle p, in PointGravity i)
{
    float gCoeff = i.G * i.massKG;
    float d = distance(p.pos, i.pos);
    //vec3 direction = (i.pos - p.pos)/distance;
    vec3 direction = normalize(i.pos - p.pos);

    return (direction * (gCoeff/(d*d)));
}

vec3 calcAccelPlanarGravity(in Particle p, in PlanarGravity i, out bool disableParticle)
{
    /*
     * Main driving equation is the distance equation from point P1=[x1,y1,z1] to the plane.
     * normal n=[a,b,c]
     * point on the plane P=[x,y,z]
     * D = abs(a*x1+b*y1+c*z1+d)/sqrt(norm(n))
     * d = -(a*x+b*y+c*z)
     * NOTE1: Assuming that normal vector is of the length 1 all the time we can drop the denominator
     * NOTE2: Initially we are not using abs to get a signed distance. If the resulting distance is positive the point is above 
     * the plane, if negative then below. When point is above the direction vector of force is -n (normal vector) otherwise is n.
     */
	disableParticle = false;
    float gCoeff = i.G * i.massKG;
    float d = -dot(i.pos, i.n);
    float D = dot(p.pos, i.n) + d;
    vec3 r;
    if(D > 0.0f) {
        r = -(i.n);
    } else {
        if(i.deactivate != 0) {
            disableParticle = true;
            return vec3(0,0,0);
        }
        r = i.n;
        D = -D;
    }

    return r*(gCoeff/(D*D));
}

vec3 calcAccelConstForce(in Particle p, in ConstForce i)
{
    return i.direction * (p.massKG/i.magnitude);
}

void main()
{
    uint i = gl_GlobalInvocationID.x;

    if(i >= particleCount) {
        return;
    }

    Particle p = d[i];

    p.ttl -= dt;
    if(p.ttl > 0) {
        toWorldScale(p, size);

        vec3 a = vec3(0, 0, 0);

        for(uint idx=0; idx< iData.pointGravityCount; idx++) {
            a += calcAccelPointGravity(p, iData.pointGravity[idx]);
        }

        for(uint idx=0; idx< iData.planarGravityCount; idx++) {
            bool disable;
            a += calcAccelPlanarGravity(p, iData.planarGravity[idx], disable);
            if(disable == true) {
                p.ttl = -1;
            }
        }

        for(uint idx=0; idx< iData.constForceCount; idx++) {
            a += calcAccelConstForce(p, iData.constForce[idx]);
        }

        euler(p, a, dt);
        toNormalizedScale(p, size);
    }

    d[i] = p;
}
